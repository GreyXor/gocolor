#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from __future__ import annotations

import argparse
import csv
import sys
import typing

__author__ = "Benjamin Kane"
__version__ = "0.1.0"
__doc__ = f"""
<description>
Examples:
    {sys.argv[0]}
Help:
Please see Benjamin Kane for help.
Code at <repo>
"""


def parse_args(*args, **kwargs):
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )

    # Use a file or stdin for an argument
    # https://stackoverflow.com/a/11038508/2958070
    parser.add_argument(
        "infile",
        nargs="?",
        type=argparse.FileType("r"),
        default=sys.stdin,
        help="data from https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences?redirectedfrom=MSDN#text-formatting , copied and pasted into a TSV",  # noqa
    )
    parser.add_argument(
        "--max_rows",
        type=int,
        default=1000,
        help="max number of TSV rows to consider. Useful for testing",
    )

    return parser.parse_args(*args, **kwargs)


class ColorInfo(typing.NamedTuple):
    code: str
    name: str
    description: str

    @staticmethod
    def from_row(row: typing.List[str]) -> ColorInfo:

        code = row[0].strip()
        code = f"\\033[{code}m"

        name = row[1].strip().replace(" ", "")
        name_replacements = {
            "Bold/Bright": "Bold",
            "Nobold/bright": "Nobold",
            "Positive(Nonegative)": "Positive",
            "Foreground": "Fg",
            "Background": "Bg",
        }
        for find, replace in name_replacements.items():
            name = name.replace(find, replace)
        if name.startswith("Bright"):
            name = name.removeprefix("Bright")
            name = name + "Bright"

        description = row[2].strip()

        return ColorInfo(code=code, name=name, description=description)


def print_color_struct(colors: typing.List[ColorInfo]):
    print(
        "// Color contains all colors listed in https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences?redirectedfrom=MSDN#text-formatting"  # noqa
    )
    print("type Color struct {")
    print()

    for ci in colors:
        print(f"\t// {ci.name} - {ci.description}")
        print(f"\t{ci.name} Code")
        print()

    print("}")
    print()


def print_color_enable(colors: typing.List[ColorInfo]):
    print("// EnableAll sets all colors to their color codes")
    print("func (c *Color) EnableAll() {")

    for ci in colors:
        print(f'\tc.{ci.name} = Code("{ci.code}")')

    print("}")
    print()


def print_color_disable(colors: typing.List[ColorInfo]):
    print("// DisableAll sets all colors to the empty string, effectively disabling color output")
    print("func (c *Color) DisableAll() {")

    for ci in colors:
        print(f"\tc.{ci.name} = empty")

    print("}")
    print()


def print_package():
    print("// Code generated by scripts/color_gen.py. DO NOT EDIT.")
    print("package gocolor")
    print()


def main():
    args = parse_args()
    with args.infile:
        reader = csv.reader(args.infile, delimiter="\t")
        colorinfos = []
        for row in reader:
            colorinfos.append(ColorInfo.from_row(row))

    colorinfos.sort(key=lambda c: c.name)
    colorinfos = colorinfos[: args.max_rows]

    print_package()
    print_color_struct(colorinfos)
    print_color_disable(colorinfos)
    print_color_enable(colorinfos)


if __name__ == "__main__":
    main()
